{"mappings":"AEEA,MAAM,EACJ,OAAO,KAAO,CAAE,AAChB,QAAO,iBAAmB,EAAI,AAC9B,QAAO,eAAiB,IAAK,AAE7B,aAAY,EAAe,IAAI,CAAE,CAC/B,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OAEd,IAAI,CAAC,YAAY,CAAG,EAChB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC1B,KAEJ,IAAI,CAAC,KAAK,CAAG,EACT,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC1B,IAAI,CAAC,eAAe,EAC1B,CAEA,iBAAkB,CAChB,OAAO,MAAM,IAAI,CAAC,CAAE,OAAQ,EAAK,IAAI,AAAC,EAAG,IAAM,MAAM,EAAK,IAAI,EAAE,IAAI,CAAC,GACvE,CAEA,WAAY,CACV,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,IAAI,CAAE,IACJ,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,GAAM,CAAA,IAAE,CAAG,CAAA,IAAE,CAAG,CAAE,CAChB,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,KAAK,MAAM,GAAK,EAAK,gBAAgB,CAAG,EAAI,CACrE,CACF,CAEA,cAAe,CACb,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,EAAK,cAAc,GAAI,CAC/D,IAAI,CAAC,MAAM,CAAG,MAEd,MACF,CAEK,IAAI,CAAC,OAAO,IACf,CAAA,IAAI,CAAC,MAAM,CAAG,MADhB,CAGF,CAEA,SAAU,CACR,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,IAAI,CAAE,IACjC,GACE,AAAyB,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACnB,EAAM,EAAK,IAAI,CAAG,GACjB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EAClD,EAAM,EAAK,IAAI,CAAG,GACjB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAEnD,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,KAAK,CAAS,CAAE,CACd,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAM,EAAgB,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE/C,OAAQ,GACN,IAAK,OACH,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EACtC,KACF,KAAK,QACH,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EACvC,KACF,KAAK,KACH,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EACpC,KACF,KAAK,OACH,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAE1C,CAEI,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,IAAM,GACjC,IAAI,CAAC,SAAS,GAGhB,IAAI,CAAC,YAAY,EACnB,CAEA,UAAU,CAAK,CAAE,CACf,OAAO,EAAM,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,WAAW,CAAC,GAC7C,CAEA,WAAW,CAAK,CAAE,CAChB,OAAO,EAAM,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,WAAW,CAAC,EAAI,OAAO,IAAI,OAAO,GACnE,CAEA,QAAQ,CAAK,CAAE,CACb,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IACtD,CAEA,UAAU,CAAK,CAAE,CACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IACvD,CAEA,YAAY,CAAG,CAAE,CACf,IAAI,EAAW,EAAI,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAErC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,IACnC,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,GACjC,CAAQ,CAAC,EAAE,EAAI,EACf,IAAI,CAAC,KAAK,EAAI,CAAQ,CAAC,EAAE,CACzB,CAAQ,CAAC,EAAI,EAAE,CAAG,GAMtB,MAAO,IAFP,EAAW,EAAS,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,MAEd,MAAM,EAAK,IAAI,CAAG,EAAS,MAAM,EAAE,IAAI,CAAC,GAAG,AACrE,CAEA,UAAU,CAAM,CAAE,CAChB,OAAO,CAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAAa,EAAO,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACzE,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,WAAY,CACV,IAAI,CAAC,IAAI,CAAC,QACZ,CAEA,QAAS,CACP,IAAI,CAAC,IAAI,CAAC,KACZ,CAEA,UAAW,CACT,IAAI,CAAC,IAAI,CAAC,OACZ,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACc,SAAhB,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,SAAS,GACd,IAAI,CAAC,SAAS,GAElB,CAEA,SAAU,CACR,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,YAAa,CACX,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAC1B,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY,GAC3C,IAAI,CAAC,eAAe,GACxB,IAAI,CAAC,KAAK,CAAG,CACf,CACF,CDvLA,MAAM,EAAO,ICyLI,ED5KX,CAAA,OAAE,CAAM,CAAA,UAAE,CAAS,CAAA,UAAE,CAAS,CAAA,SAAE,CAAQ,CAAE,CAX/B,CACf,OAAQ,SAAS,aAAa,CAAC,WAC/B,UAAW,SAAS,aAAa,CAAC,eAClC,UAAW,SAAS,aAAa,CAAC,eAClC,SAAU,CACR,KAAM,SAAS,aAAa,CAAC,iBAC7B,IAAK,SAAS,aAAa,CAAC,gBAC5B,MAAO,SAAS,aAAa,CAAC,iBAChC,CACF,EAsCA,SAAS,IACP,AAKF,CAAA,WACE,IAAM,EAAQ,EAAK,QAAQ,GAE3B,EAAU,gBAAgB,CAAC,eAAe,OAAO,CAAC,CAAC,EAAM,KACvD,IAEM,EAAQ,CAAK,CAFP,KAAK,KAAK,CAAC,EAAQ,GAEP,CADZ,EAAQ,EACS,AAE7B,CAAA,EAAK,WAAW,CAAG,GAAS,GAC5B,EAAK,SAAS,CAAG,CAAC,UAAU,EAAE,EAAQ,CAAC,aAAa,EAAE,EAAM,CAAC,CAAG,GAAG,CAAC,AACtE,EACF,CAAA,IAGE,EAAU,WAAW,CAAG,EAAK,QAAQ,GAjBrC,AAoBF,WACE,IAAM,EAAa,EAAK,SAAS,GAEjC,OAAO,OAAO,CAAC,GAAU,OAAO,CAAC,CAAC,CAAC,EAAK,EAAQ,IAC9C,EAAQ,SAAS,CAAC,MAAM,CAAC,SAAU,IAAQ,EAC7C,EACF,GAzBA,CAtCA,EAAO,gBAAgB,CAAC,QAGxB,WACE,IAAM,EAAS,AAAqB,SAArB,EAAK,SAAS,GAE7B,CAAI,CAAC,EAAS,QAAU,UAAU,GAElC,EAAO,WAAW,CAAG,EAAS,UAAY,QAC1C,EAAO,SAAS,CAAC,MAAM,CAAC,QAAS,CAAC,GAClC,EAAO,SAAS,CAAC,MAAM,CAAC,UAAW,GAEnC,GACF,GAZA,SAAS,gBAAgB,CAAC,UAc1B,SAAoB,CAAC,EACnB,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAEF,EAAE,cAAc,GAEhB,IAAM,EAAQ,CACZ,UAAW,IAAM,EAAK,QAAQ,GAC9B,WAAY,IAAM,EAAK,SAAS,GAChC,QAAS,IAAM,EAAK,MAAM,GAC1B,UAAW,IAAM,EAAK,QAAQ,EAChC,CAEI,CAAA,CAAK,CAAC,EAAE,GAAG,CAAC,GACd,CAAK,CAAC,EAAE,GAAG,CAAC,GACZ,IAEJ","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static SIZE = 4;\n    static TILE_PROBABILITY = 0.9;\n    static WIN_TILE_VALUE = 2048;\n    constructor(initialState = null){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState ? JSON.parse(JSON.stringify(initialState)) : null;\n        this.state = initialState ? JSON.parse(JSON.stringify(initialState)) : this.initializeBoard();\n    }\n    initializeBoard() {\n        return Array.from({\n            length: $a5fd07fa01589658$var$Game.SIZE\n        }, ()=>Array($a5fd07fa01589658$var$Game.SIZE).fill(0));\n    }\n    spawnTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < $a5fd07fa01589658$var$Game.SIZE; row++){\n            for(let col = 0; col < $a5fd07fa01589658$var$Game.SIZE; col++)if (this.state[row][col] === 0) emptyTiles.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyTiles.length > 0) {\n            const { row: row, col: col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.state[row][col] = Math.random() < $a5fd07fa01589658$var$Game.TILE_PROBABILITY ? 2 : 4;\n        }\n    }\n    updateStatus() {\n        if (this.state.some((row)=>row.includes($a5fd07fa01589658$var$Game.WIN_TILE_VALUE))) {\n            this.status = \"win\";\n            return;\n        }\n        if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        for(let row = 0; row < $a5fd07fa01589658$var$Game.SIZE; row++)for(let col = 0; col < $a5fd07fa01589658$var$Game.SIZE; col++){\n            if (this.state[row][col] === 0 || row < $a5fd07fa01589658$var$Game.SIZE - 1 && this.state[row][col] === this.state[row + 1][col] || col < $a5fd07fa01589658$var$Game.SIZE - 1 && this.state[row][col] === this.state[row][col + 1]) return true;\n        }\n        return false;\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const previousState = JSON.stringify(this.state);\n        switch(direction){\n            case \"left\":\n                this.state = this.slideLeft(this.state);\n                break;\n            case \"right\":\n                this.state = this.slideRight(this.state);\n                break;\n            case \"up\":\n                this.state = this.slideUp(this.state);\n                break;\n            case \"down\":\n                this.state = this.slideDown(this.state);\n                break;\n        }\n        if (JSON.stringify(this.state) !== previousState) this.spawnTile();\n        this.updateStatus();\n    }\n    slideLeft(state) {\n        return state.map((row)=>this.compressRow(row));\n    }\n    slideRight(state) {\n        return state.map((row)=>this.compressRow(row.reverse()).reverse());\n    }\n    slideUp(state) {\n        return this.transpose(this.slideLeft(this.transpose(state)));\n    }\n    slideDown(state) {\n        return this.transpose(this.slideRight(this.transpose(state)));\n    }\n    compressRow(row) {\n        let filtered = row.filter((value)=>value !== 0);\n        for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n            filtered[i] *= 2;\n            this.score += filtered[i];\n            filtered[i + 1] = 0;\n        }\n        filtered = filtered.filter((value)=>value !== 0);\n        return [\n            ...filtered,\n            ...Array($a5fd07fa01589658$var$Game.SIZE - filtered.length).fill(0)\n        ];\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.resetBoard();\n            this.status = \"playing\";\n            this.spawnTile();\n            this.spawnTile();\n        }\n    }\n    restart() {\n        this.resetBoard();\n        this.status = \"idle\";\n    }\n    resetBoard() {\n        this.state = this.initialState ? JSON.parse(JSON.stringify(this.initialState)) : this.initializeBoard();\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$elements = {\n    button: document.querySelector(\".button\"),\n    gameField: document.querySelector(\".game-field\"),\n    gameScore: document.querySelector(\".game-score\"),\n    messages: {\n        lose: document.querySelector(\".message-lose\"),\n        win: document.querySelector(\".message-win\"),\n        start: document.querySelector(\".message-start\")\n    }\n};\nconst { button: $09e991522ca7e64e$var$button, gameField: $09e991522ca7e64e$var$gameField, gameScore: $09e991522ca7e64e$var$gameScore, messages: $09e991522ca7e64e$var$messages } = $09e991522ca7e64e$var$elements;\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$handleGameStart);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleMove);\nfunction $09e991522ca7e64e$var$handleGameStart() {\n    const isIdle = $09e991522ca7e64e$var$game.getStatus() === \"idle\";\n    $09e991522ca7e64e$var$game[isIdle ? \"start\" : \"restart\"]();\n    $09e991522ca7e64e$var$button.textContent = isIdle ? \"Restart\" : \"Start\";\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\", !isIdle);\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\", isIdle);\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$handleMove(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    e.preventDefault();\n    const moves = {\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n    };\n    if (moves[e.key]) {\n        moves[e.key]();\n        $09e991522ca7e64e$var$updateUI();\n    }\n}\nfunction $09e991522ca7e64e$var$updateUI() {\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateMessages();\n}\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-cell\").forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        cell.textContent = value || \"\";\n        cell.className = `field-cell${value ? ` field-cell--${value}` : \"\"}`;\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateMessages() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    Object.entries($09e991522ca7e64e$var$messages).forEach(([key, message])=>{\n        message.classList.toggle(\"hidden\", key !== gameStatus);\n    });\n}\n\n\n//# sourceMappingURL=index.23b1b398.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst elements = {\n  button: document.querySelector('.button'),\n  gameField: document.querySelector('.game-field'),\n  gameScore: document.querySelector('.game-score'),\n  messages: {\n    lose: document.querySelector('.message-lose'),\n    win: document.querySelector('.message-win'),\n    start: document.querySelector('.message-start'),\n  },\n};\n\nconst { button, gameField, gameScore, messages } = elements;\n\nbutton.addEventListener('click', handleGameStart);\ndocument.addEventListener('keydown', handleMove);\n\nfunction handleGameStart() {\n  const isIdle = game.getStatus() === 'idle';\n\n  game[isIdle ? 'start' : 'restart']();\n\n  button.textContent = isIdle ? 'Restart' : 'Start';\n  button.classList.toggle('start', !isIdle);\n  button.classList.toggle('restart', isIdle);\n\n  updateUI();\n}\n\nfunction handleMove(e) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n  e.preventDefault();\n\n  const moves = {\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n  };\n\n  if (moves[e.key]) {\n    moves[e.key]();\n    updateUI();\n  }\n}\n\nfunction updateUI() {\n  renderBoard();\n  updateScore();\n  updateMessages();\n}\n\nfunction renderBoard() {\n  const board = game.getState();\n\n  gameField.querySelectorAll('.field-cell').forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.textContent = value || '';\n    cell.className = `field-cell${value ? ` field-cell--${value}` : ''}`;\n  });\n}\n\nfunction updateScore() {\n  gameScore.textContent = game.getScore();\n}\n\nfunction updateMessages() {\n  const gameStatus = game.getStatus();\n\n  Object.entries(messages).forEach(([key, message]) => {\n    message.classList.toggle('hidden', key !== gameStatus);\n  });\n}\n","'use strict';\n\nclass Game {\n  static SIZE = 4;\n  static TILE_PROBABILITY = 0.9;\n  static WIN_TILE_VALUE = 2048;\n\n  constructor(initialState = null) {\n    this.score = 0;\n    this.status = 'idle';\n\n    this.initialState = initialState\n      ? JSON.parse(JSON.stringify(initialState))\n      : null;\n\n    this.state = initialState\n      ? JSON.parse(JSON.stringify(initialState))\n      : this.initializeBoard();\n  }\n\n  initializeBoard() {\n    return Array.from({ length: Game.SIZE }, () => Array(Game.SIZE).fill(0));\n  }\n\n  spawnTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < Game.SIZE; row++) {\n      for (let col = 0; col < Game.SIZE; col++) {\n        if (this.state[row][col] === 0) {\n          emptyTiles.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const { row, col } =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.state[row][col] = Math.random() < Game.TILE_PROBABILITY ? 2 : 4;\n    }\n  }\n\n  updateStatus() {\n    if (this.state.some((row) => row.includes(Game.WIN_TILE_VALUE))) {\n      this.status = 'win';\n\n      return;\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let row = 0; row < Game.SIZE; row++) {\n      for (let col = 0; col < Game.SIZE; col++) {\n        if (\n          this.state[row][col] === 0 ||\n          (row < Game.SIZE - 1 &&\n            this.state[row][col] === this.state[row + 1][col]) ||\n          (col < Game.SIZE - 1 &&\n            this.state[row][col] === this.state[row][col + 1])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    switch (direction) {\n      case 'left':\n        this.state = this.slideLeft(this.state);\n        break;\n      case 'right':\n        this.state = this.slideRight(this.state);\n        break;\n      case 'up':\n        this.state = this.slideUp(this.state);\n        break;\n      case 'down':\n        this.state = this.slideDown(this.state);\n        break;\n    }\n\n    if (JSON.stringify(this.state) !== previousState) {\n      this.spawnTile();\n    }\n\n    this.updateStatus();\n  }\n\n  slideLeft(state) {\n    return state.map((row) => this.compressRow(row));\n  }\n\n  slideRight(state) {\n    return state.map((row) => this.compressRow(row.reverse()).reverse());\n  }\n\n  slideUp(state) {\n    return this.transpose(this.slideLeft(this.transpose(state)));\n  }\n\n  slideDown(state) {\n    return this.transpose(this.slideRight(this.transpose(state)));\n  }\n\n  compressRow(row) {\n    let filtered = row.filter((value) => value !== 0);\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        this.score += filtered[i];\n        filtered[i + 1] = 0;\n      }\n    }\n\n    filtered = filtered.filter((value) => value !== 0);\n\n    return [...filtered, ...Array(Game.SIZE - filtered.length).fill(0)];\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.resetBoard();\n      this.status = 'playing';\n      this.spawnTile();\n      this.spawnTile();\n    }\n  }\n\n  restart() {\n    this.resetBoard();\n    this.status = 'idle';\n  }\n\n  resetBoard() {\n    this.state = this.initialState\n      ? JSON.parse(JSON.stringify(this.initialState))\n      : this.initializeBoard();\n    this.score = 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","SIZE","TILE_PROBABILITY","WIN_TILE_VALUE","constructor","initialState","score","status","JSON","parse","stringify","state","initializeBoard","Array","from","length","fill","spawnTile","emptyTiles","row","col","push","Math","floor","random","updateStatus","some","includes","canMove","move","direction","previousState","slideLeft","slideRight","slideUp","slideDown","map","compressRow","reverse","transpose","filtered","filter","value","i","matrix","_","colIndex","moveLeft","moveRight","moveUp","moveDown","getState","getScore","getStatus","start","resetBoard","restart","$09e991522ca7e64e$var$game","button","$09e991522ca7e64e$var$button","gameField","$09e991522ca7e64e$var$gameField","gameScore","$09e991522ca7e64e$var$gameScore","messages","$09e991522ca7e64e$var$messages","document","querySelector","lose","win","$09e991522ca7e64e$var$updateUI","$09e991522ca7e64e$var$renderBoard","board","querySelectorAll","forEach","cell","index","textContent","className","$09e991522ca7e64e$var$updateMessages","gameStatus","Object","entries","key","message","classList","toggle","addEventListener","isIdle","e","preventDefault","moves","ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],"version":3,"file":"index.23b1b398.js.map"}